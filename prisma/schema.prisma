// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id        String     @id @default(uuid())
  email     String     @unique
  name      String?
  surname   String?
  password  String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  order     Order[]
  basket    Basket[]
  favorite  Favorite[]
  adress    Adress[]
  role      Role?      @relation(fields: [roleId], references: [id])
  roleId    String?

  @@index([roleId])
}

model Role {
  id        String   @id @default(uuid())
  name      String   @default("USER")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User[]
}

model Product {
  id          String        @id @default(uuid())
  name        String
  description String?
  price       Int
  quantity    Int?          @default(1)
  image       String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  orderItem   OrderItem[]
  basket      Basket[]
  category    Category?     @relation(fields: [categoryId], references: [id])
  categoryId  String?
  favorite    Favorite[]
  shopProduct ShopProduct[]

  @@index([categoryId])
}

model Order {
  id        String      @id @default(uuid())
  userId    String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  user      User        @relation(fields: [userId], references: [id])
  orderItem OrderItem[]

  @@index([userId])
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

model Basket {
  id        String   @id @default(uuid())
  userId    String
  productId String
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@index([userId])
  @@index([productId])
}

model Admin {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String?
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id        String    @id @default(uuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  product   Product[]
}

model Favorite {
  id        String   @id @default(uuid())
  userId    String
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@index([userId])
  @@index([productId])
}

model Shop {
  id          String        @id @default(uuid())
  name        String
  address     String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  shopProduct ShopProduct[]
}

model ShopProduct {
  id        String   @id @default(uuid())
  shopId    String
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  shop      Shop     @relation(fields: [shopId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@index([shopId])
  @@index([productId])
}

model Adress {
  id        String   @id @default(uuid())
  userId    String
  address   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}
